#+TITLE: testsc 동적 시험 도움 라이브러리
#+SETUPFILE: t:\usr\local\editor\emacsW32\site-lisp\thirdparty\orghtmltheme\setup\theme-readtheorg-local.setup
#+OPTIONS: toc:2 ^:{}

# http://orgmode.org/manual/Table-of-contents.html

* testsc - 동적 시험 라이브러리 
** 무엇을 하는 것인가? 
   동적 시험시 필요한 테스트데이터를 파일로 부터 읽어 오는 라이브러리이다.
   파일의 형식은 scheme 스트립트이다. 간단한 데이터의 정의 뿐만 아니라
   프로그래밍을 통한 데이터의 생성이 가능하다. 

   
   #+BEGIN_SRC dot :file concept.png
     digraph {
     rankdir =LR ; 
        C [shape=box,  label="CodeScroll"] //style=filled, color="gray"
        T [shape=circle,   label="test .exe"] 
        TL [shape=doublecircle,   label="testsc library"] 
        S [shape=polygon, sides=4, skew=.3 ,  label="scheme file\ngenerage test data"] 
        C -> T
        T -> TL [dir=none] [label="linking"]
        S -> TL
     }
   #+END_SRC

   #+RESULTS:
   [[file:concept.png]]


   #+BEGIN_SRC ditta
   
   
   #+end_SRC



** 장점 
*** 테스트 데이터 생성
    CodeScroll가 함수 입력값에 대한 테스트데이터를 생성하기는 한다. 각
    파라미터에 대하여 각각 테스트 데이터를 생성해 주는 것으로 보이며 변수들의
    상관관계를 고려하여 만드는 것은 아닌 것 같다. 가령 함수의 인자로 3개의 enum
    타입을 사용하는 경우 입력 가능한 모든 조합의 생성이 가능함에도 불구하고
    사용자가 수동으로 입력하고 있는 실정이다. testsc 를 사용하며 각 입력값이
    가지는 범위를 이용하여 다수의 파라미터에 대한 조합을 생성할 수 있다.  

*** 다수의 테스트케이스 생성
    테스트 데이터가 많을 경우 CodeScroll 이 제공하는 UI 를 통하여 데이터를
    입력하기가 불편하다. 프로그래밍을 통하여 다수의 데이터도 간편하게 생성이
    가능한다.  
*** 테스트 데이터 재활용
    Codescroll 에서 같은 scheme 파일을 읽어 오도록 설정하면 테스트 데이터를
    재활용할 수 있다. 
    구조가 같은 함수가 다수 있을 때 사용하면 편리하다. 
** 단점 
   scheme 언어에 대하여 지식이 있어야 사용 가능하다. 

   [[scheme_syntax][scheme 문법 참조]]

** 참조 
*** C 함수 [[testsc_c_api]]
*** scheme <<testsc_scheme_api>>
* 사용방법 
** 테스트 스크립트 호출 부분 작성
   관련 함수 상세 내용은 
*** 테스트 케이스에서 관련 스크립트 지정           
*** 테스트 케이스에서 관련 값을 가져 오는 부분 지정 
** 테스트 스크립트 작성
   앞서 지정한 폴더에 scheme 파일을 작성한다. [[testsc_scheme_api]]
   테스트 스크립트에는 테스트번호 값을 이용하여 테스트별 스크립트 작성이
   가능한다. 

** testsc 확장 모듈 
   C 를 이용하여 확장 할 수 있다. 
*** 구조체 테스트 데이터 생성 
    확장 모듈을 이용하여 구조체 테스트 데이터를 생성할 수 있다. 
    [[testsc_admin_get]] 을 이용하여 scheme 파일에서 생성한 구조체를 가져 온다. 
** 개선 방법 
*** 일괄 빌드 수행
    모든 테스트 케이스를 한꺼번에 컴파일 한 후 작업하면 더 효율 적으로 할 수
    있다.
*** 테스트 데이터를 파일에서 가져오게 한다. 
**** 컴파일 없이 테스트 수행을 할 수 있다. 
*** 테스트 데이터를 프로그래밍 할 수 있게 한다. 
    테스트 데이터에 대한 프로그래밍을 통하여 커버리지를 높일 수 있는 데이터를
    생성할 수 있다.
*** 라이브러리를 활용한다. 
    STUB 을 중복적으로 생성할 필요 없이 재사용 할 수 있다. 
**** embedded language 활용
***** scheme
      문법이 간단하여 구현이 용이함. 
****** 구현 - tinyscheme
       5천 라인 정도의 C 파일로 language 가 구현 되어 있음. 
       codescroll에서 사용하는 컴파일러만으로 컴파일 가능. 추가 도구 등이 필요
       없음. 

* 사용 시나리오 
    :PROPERTIES:
    :ATTACH_DIR: u:/orgdir/testsc/
    :END:
** Codescroll 테스트케이스 생성 
*** 메뉴얼을 참고하여 테스트케이스를 생성한다. 
** Codescroll 에서 테스트스크립트(scheme 파일) 호출 부분 작성 
   다음에 나오는 함수의 상세 내용은 [[testsc_c_api]] 을 참조한다. 
*** 관련 헤더파일 include 
    *유닛테스트* 더블클릭 >>  *테스트 정보* >> *테스트 전역 코드*
    
    [[file:u:/orgdir/testsc/testglobalcode.png]]

*** 사용자 코드 작성 
    *유닛테스트* 더블클릭 >>  *테스트 정보* >> *사용자 코드*
    
    테스트스크립트를 로딩하는 부분으로써 다음과 같이 호출한다. 
    
    각 함수의 상세 내용은 [[testsc_c_api]] 을 참조한다. 
    
    #+BEGIN_SRC cpp
      testsc_init(CS_TESTCASENO(), "(testsc-require mb/t-0)", "c:/testsc/");
      testsc_eval( "(testsc-require mb/t-9)") ;
    #+END_SRC

    [[testsc_init]] 를 호출하여 testsc 를 초기화 한다. 마지막 파라미터의 경로는
    testsc 의 HOME 경로가 된다. 그 경로아래에 불러올 스크립트가 있어야 한다. 


    [[testsc-require]] 는 스크립트를 실행한다. 파라미터는 불러오고자 하는
    스크립트명이다. (testsc-require mb/t-9) 은 testsc 홈폴더 아래의 mb/t-9.scm
    파일을 호출한다. 

    스크립트파일의 확장자(.scm)는 생략하여야만 한다. 

    경로명은 다음과 같는 convention 으로 작성한다. .scm 파일은 t- 으로 시작하는
    것을 convention 으로 한다. 

      - 폴더명 : 테스트하고자 하는 .cpp 파일을 나타내는 약어
      - t-0.scm : 테스트하고자 하는 .cpp 파일에서 공통으로 사용하는 상수(enum
        타입 포함) 정의 
      - t-testname.scm : 테스트케이스(함수별) 를 나타내는 약어. 


    [[file:u:/orgdir/testsc/usercode.png]]
    
*** 호출전 코드 작성 

    *유닛테스트* 더블클릭 >>  *테스트 정보* >> *테스트 대상 함수* >> *호출 전 코드*
    
    테스트스크립트에서 읽은 값을 codescroll 변수에 설정한다. 

    #+BEGIN_SRC cpp
      iValue1    = testsc_ivalue("value1") ; 
      dValue2    = testsc_dvalue("value2") ; 
      strValue3  = testsc_strvalue("value3") ;
      pValue4    = (track_t*)testsc_admin_get(0) ; 
    #+END_SRC

** 테스트스크립트 작성 
*** 변수 값 선언 
    #+BEGIN_SRC scheme
      (define value1 10)
      (define value2 3.1415926378)
      (define value3 "string 테스트 데이터")
    #+END_SRC

** 테스트스크립트 디버깅
   값이 예상과 다르거나 스크립트 로딩에 오류가 있는 것 같을 때 수행 
*** scheme 실행 
    tinyscheme 홈 플더의 scheme.exe 를 실행한다. 
    [[testsc-set-testnum]] 를 이용하여 디버깅 하고자 하는 테스트 번호를 설정한다. 
    (testsc-require ac/t-1 ) 를 이용하여 테스트 스크립트를 로딩한다. 
    
    확인하고자 하는 값을 입력하면 값이 출력됨 
    #+BEGIN_SRC scheme
    (testsc-set-testnum 8 )
    (testsc-require ac/t-1 )
    ts> mas
    100
    ts> testsc
    1
    #+END_SRC


* reference 
** C API - <<testsc_c_api>>

   CodeScroll 에서 스텁등을 작성할 때 사용한다. 
   
*** long testsc_ivalue(const char* name)  <<testsc_ivalue>>
    #+BEGIN_SRC 

    #+END_SRC
*** double testsc_dvalue(const char* name)  <<testsc_dvalue>>
*** char* testsc_strvalue(const char* name)  <<testsc_strvalue>>
*** int testsc_admin_length( void ) <<testsc_admin_length>>
*** void testsc_admin_erase(int index ) <<testsc_admin_erase>>
*** void testsc_track_set(uint32_t id , network_track_data_ptr t ) <<testsc_track_set>>
*** void testsc_eval(const char *cmd)  <<testsc_eval>>
*** void testsc_init(int testnum, const char *cmd, const char *homepath = 0 )  <<testsc_init>>
*** char* testsc_admin_get( int i )  <<testsc_admin_get>>
*** void testsc_debug(const char*format ...)  <<testsc_debug>>

*** pop_args 

** scheme API - [[testsc_scheme_api]]
*** util.scm 
**** 변수 
***** *testsc-home*  <<*testsc-home*>> 
      - 목적 : 스크립트 파일 위치 
      - 방향 : 
      - 사용법 
        testsc-debug 를 이용하여 경로를 확인한다. 
       
        #+BEGIN_SRC scheme
        (testsc-debug *testsc-home*)
        #+END_SRC

**** 함수 
***** (define-macro (testsc-require x) ...) <<testsc-require>>
***** (define (t-offset start) ...) <<t-offset>> 
      (define (t-offset start) (- (testsc-get-testnum) start))

***** (define (for-each-index-offset offset proc  . args ) ...) <<for-each-index-offset>>
      - 목적 : 테스트케이스별 값을 설정한다. 
      - 사용법 : 테이스케이스별로 순차적으로 값을 설정하고자 할 때 사용한다. 
        #+BEGIN_SRC scheme
        (define testsc 0 )
        (define order 0 )
        (for-each-index-offset
          1
          (lambda (x)
            (set! testsc 1 )
            (set! order x)
            )
            system_types-assume_cntrl
            system_types-control_and_engage
            system_types-return_to_base
            system_types-transfer_cntrl
            system_types-launch_heli
            system_types-request_cntrl
            system_types-cancel_handover  
            -1
          )

        #+END_SRC
      - 입력 파라미터 
        + offset : 값 설정을 시작할 테스트케이스 번호
        + proc   : 값 설정을 수행할 함수 
        + args   : 테스트 값 

***** (define ( feio offset proc args ) ...) <<feio>>
      - 목적 : 테스트케이스별 값을 설정한다. 
      - 사용법 : 테이스케이스별로 순차적으로 값을 설정하고자 할 때 사용한다. 
                 [[for-each-index-offset]] 와 비교하여 args 부분에 리스트가 올 수
                 있다. 
        #+BEGIN_SRC scheme

          (define i_enStatus 0)
          (define m_bEnableCallback 0)
          (define i_pchData_0 0)
          (define i_pchData_1 0)

          (feio
           1
           (lambda (x)
             (set! i_enStatus        (nth 0 x))
             (set! m_bEnableCallback (nth 1 x))
             (set! i_pchData_0       (nth 2 x))
             (set! i_pchData_1       (nth 3 x)))

           (combi '(11 12) '(1) '(4 5 ) '(1 0 )))


        #+END_SRC

***** (define (combi . args)...) <<combi>>
      - 목적 : 테스트 데이터 생성(combination)
      - 사용법 : 

        #+BEGIN_SRC scheme
        (combi '(a b ) '(1 2 ))
        #+END_SRC

        #+RESULT :
        '((a 1) (a 2) (b 1) (b 2))
***** (define (nth n l) ...)
      - 목적 : 리스트에서 n 번째 항목을 리턴한다. 
      - 사용법 : 리스트에서 값을 가져오고자 할 때 사용한다. 

        #+BEGIN_SRC scheme
        (nth 3 '(zero one two three four))
        #+END_SRC

        #+RESULT :
        three

      - 입력 파라미터 
        + n : 리스트에서 가져오고자 하는 인덱스( 0 부터 시작 ) 
        + l : 리스트 
***** (define (num-list start end  ) ...) <<num-list>>

      - 프로토타입 : (define (num-list start end  ) ...)
      - 목적 : 숫자 리스트를 리턴한다. 
      - 사용법 : 

        #+BEGIN_SRC scheme
        (num-list 1 10)
        #+END_SRC

        #+RESULT :
        '(1 2 3 4 5 6 7 8 9 )

      - 입력 파라미터 
        + start : 시작 값(포함)
        + end : 종료 값(불포함)


**** test_sc.c 
*****  pointer foreign_testsc_set_testnum(scheme* sc, pointer args) <<foreign_testsc_set_testnum>> <<testsc-set-testnum>>


** 추가 구현 
   C 를 이용하여 추가적인 기능을 구현할 수 있다.
*** 구조체 테스트 데이터 생성 
    

* scheme 문법 <<scheme_syntax>>
** 15분 만에 scheme 배우기
   #+BEGIN_SRC scheme
     ;; This gives an introduction to Scheme in 15 minutes
     ;;
     ;; First make sure you read this text by Peter Norvig:
     ;; http://norvig.com/21-days.html
     ;;
     ;; Then install GNU Guile
     ;; NOTE: I won't encourage using Racket but if you really want,
     ;;       I still give you some hints in this tutorial. But the
     ;;       tutorial will base on Guile and RnRs.
     ;;
     ;; openSUSE: zypper install guile
     ;; Debian: apt-get install guile-2.0 (or see your distro instructions)
     ;; MacOSX: Building Guile 2.0 on the Mac
     ;;         http://irrealblog.blogspot.hk/2011/03/building-guile-2.html
     ;; Windows try web: http://repl.it/languages/Scheme
     ;;
     ;; More general information can be found at:
     ;; http://www.gnu.org/software/guile

     ;; Important warning:
     ;;
     ;; Going through this tutorial won't damage your computer unless
     ;; you get so angry that you throw it on the floor.  In that case,
     ;; I hereby decline any responsability.  Have fun!

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; 
     ;; Fire up Scheme:
     ;; Type 'guile' for GNU Guile
     ;; Or just use the browser for web version
     ;;
     ;; Now look at the prompt:

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;;
     ;; Semi-colons start comments anywhere on a line.
     ;;
     ;; Scheme programs are made of symbolic expressions (s-exps):
     (+ 2 2)

     ;; This symbolic expression reads as "Add 2 to 2".

     ;; Sexps are enclosed into parentheses, possibly nested:
     (+ 2 (+ 1 1))

     ;; A symbolic expression contains atoms or other symbolic
     ;; expressions.  In the above examples, 1 and 2 are atoms,
     ;; (+ 2 (+ 1 1)) and (+ 1 1) are symbolic expressions.

     (+ 3 (+ 1 2))
     ;; => 6

     ;; `set!' stores a value into a variable:
     ;; Please define my-name first, or you can't assign it.
     (define my-name "unknown")
     (set! my-name "NalaGinrut")

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; 1. Primitive Datatypes and Operators
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

     ;;; Numbers
     9999999999999999999999 ; integers
     #b111                  ; binary => 7
     #o111                  ; octal => 73
     #x111                  ; hexadecimal => 273
     3.14                   ; reals
     6.02e+23
     1/2                    ; rationals
     1+2i                   ; complex numbers

     ;; Function application is written (f x y z ...)
     ;; where f is a function and x, y, z, ... are operands
     ;; If you want to create a literal list of data, use ' to stop it from
     ;; being evaluated
     '(+ 1 2) ; => (+ 1 2)
     ;; Now, some arithmetic operations
     (+ 1 1)  ; => 2
     (- 8 1)  ; => 7
     (* 10 2) ; => 20
     (expt 2 3) ; => 8
     (quotient 5 2) ; => 2
     (remainder 5 2) ; => 1
     (/ 35 5) ; => 7
     (/ 1 3) ; => 1/3
     (exact->inexact 1/3) ; => 0.3333333333333333
     (+ 1+2i  2-3i) ; => 3-1i

     ;;; Booleans
     #t ; for true
     #f ; for false -- any value other than #f is true
     (not #t) ; => #f
     (and 0 #f (error "doesn't get here")) ; => #f
     (or #f 0 (error "doesn't get here"))  ; => 0

     ;;; Characters
     ;; According to RnRs, characters only have two notations:
     ;; #\ and #\x
     ;; Racket support #\u, but it's never Scheme.
     #\A ; => #\A
     #\λ ; => #\λ
     #\x03BB ; => #\λ

     ;;; Strings are fixed-length array of characters.
     "Hello, world!"
     "Benjamin \"Bugsy\" Siegel"   ; backslash is an escaping character
     "Foo\tbar\x21\a\r\n" ; includes C escapes (only support hex)
     ;; try to print the above string
     ;; Printing is pretty easy
     (display "I'm Guile. Nice to meet you!\n")
     ;; and unicode escapes
     "\u004B" ; => K

     ;; Strings can be added too!
     (string-append "Hello " "world!") ; => "Hello world!"

     ;; A string can be treated like a list of characters
     (string-ref "Apple" 0) ; => #\A

     ;; format can be used to format strings:
     (format #t "~a can be ~a" "strings" "formatted")
     ;; ==> print "strings can be formatted" on screen
     (define str (format #f "~a can be ~a" "strings" "formatted"))
     ;; str was assigned to "strings can be formatted"

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; 2. Variables
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; You can create a variable using define
     ;; a variable name can use any character except: ()[]{}",'`;#|\
     (define some-var 5)
     some-var ; => 5

     ;; Accessing a previously unassigned variable is an exception
                                             ; x ; => x: undefined ...

     ;; Local binding: `me' is bound to "Bob" only within the (let ...)
     (let ((me "Bob"))
       "Alice"
       me) 
     ;; => "Bob"

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; 3. Structs and Collections
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

     ;; Record Type (Skip this chapter if you're trying web version
     (use-modules (srfi srfi-9))
     (define-record-type dog 
       (make-dog name breed age)
       dog?
       (name dog-name)
       (breed dog-breed)
       (age dog-age))
     (define my-pet
       (make-dog "lassie" "collie" 5))
     my-pet ; => #<dog>
     (dog? my-pet) ; => #t
     (dog-name my-pet) ; => "lassie"

     ;;; Pairs (immutable)
     ;; `cons' constructs pairs, `car' and `cdr' extract the first
     ;; and second elements
     (cons 1 2) ; => '(1 . 2)
     (car (cons 1 2)) ; => 1
     (cdr (cons 1 2)) ; => 2

     ;;; Lists

     ;; Lists are linked-list data structures, made of `cons' pairs and end
     ;; with a '() to mark the end of the list
     (cons 1 (cons 2 (cons 3 '()))) ; => '(1 2 3)
     ;; `list' is a convenience variadic constructor for lists
     (list 1 2 3) ; => '(1 2 3)
     ;; and a quote can also be used for a literal list value
     '(1 2 3) ; => '(1 2 3)

     ;; Can still use `cons' to add an item to the beginning of a list
     (cons 4 '(1 2 3)) ; => '(4 1 2 3)

     ;; Use `append' to add lists together
     (append '(1 2) '(3 4)) ; => '(1 2 3 4)

     ;; Lists are a very basic type, so there is a *lot* of functionality for
     ;; them, a few examples:
     ;; For Racket users:
     (map add1 '(1 2 3))          ; => '(2 3 4)
     ;; For Guile users:
     (map 1+ '(1 2 3))	     ; => '(2 3 4)
     ;; add1 or 1+ is not a standard primitive, so it depends on implementations.

     (map + '(1 2 3) '(10 20 30)) ; => '(11 22 33)

     ;; filter/count/take/drop are dwell in SRFI-1, so you have to load it first.
     ;; For Racket users:
     (require srfi/1)
     ;; For Guile users:
     (use-modules (srfi srfi-1))

     (filter even? '(1 2 3 4))    ; => '(2 4)
     (count even? '(1 2 3 4))     ; => 2
     (take '(1 2 3 4) 2)          ; => '(1 2)
     (drop '(1 2 3 4) 2)          ; => '(3 4)

     ;;; Vectors

     ;; Vectors are fixed-length arrays
     #(1 2 3) ; => '#(1 2 3)

     ;; Use `vector-append' to add vectors together
     ;; NOTE: vector-append is in SRFI-43 which is not supported in Guile-2.0.9
     ;;       or earlier. And it may not be added in Guile-2.0.10.
     ;;       But it's proposed in R7RS, and there's a r7rs branch in Guile upstream.
     ;;       If your Guile doesn't support vector-append, please skip this step.
     (vector-append #(1 2 3) #(4 5 6)) ; => #(1 2 3 4 5 6)

     ;;; Hashes

     ;; Create mutable hash table
     ;; For GNU Guile
     (define m (make-hash-table))
     (hash-set! m 'a 1)
     (hash-set! m 'b 2)
     (hash-set! m 'c 3)

     ;; Retrieve a value
     (hash-ref m 'a) ; => 1

     ;; Retrieving a non-present value is an exception
     (hash-ref m 'd) 
     ;; => #f 

     ;; You can provide a default value for missing keys
     (hash-ref m 'd 0)
     ;; => 0

     ;; Use `hash-remove' to remove keys (functional too)
     (hash-remove! m 'a) ; => ((b . 2) (c . 3))

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; 3. Functions
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

     ;; Use `lambda' to create functions.
     ;; A function always returns the value of its last expression
     (lambda () "Hello World") ; => #<procedure>

     ;; Use parens to call all functions, including a lambda expression
     ((lambda () "Hello World")) ; => "Hello World"
     ((lambda (x) (+ x x)) 5)      ; => 10

     ;; Assign a function to a var
     (define hello-world (lambda () "Hello World"))
     (hello-world) ; => "Hello World"

     ;; You can shorten this using the function definition syntatcic sugar:
     (define (hello-world2) "Hello World")
     (hello-world2) ; => "Hello World"

     ;; The () in the above is the list of arguments for the function
     (define hello
       (lambda (name)
         (string-append "Hello " name)))
     (hello "Steve") ; => "Hello Steve"
     ;; ... or equivalently, using a sugared definition:
     (define (hello2 name)
       (string-append "Hello " name))

     ;; You can have multi-variadic functions too, using `case-lambda'
     (define hello3
       (case-lambda
         (() "Hello World")
         ((name) (string-append "Hello " name))))
     (hello3 "Jake") ; => "Hello Jake"
     (hello3) ; => "Hello World"
     ;; ... or specify optional arguments with a default value expression
     (define* (hello4 #:key (name "World"))
       (string-append "Hello " name))

     ;; Functions can pack extra arguments up in a list
     (define (count-args . args)
       (format #t "You passed ~a args: ~a" (length args) args))
     (count-args 1 2 3) ; => "You passed 3 args: (1 2 3)"
     ;; ... or with the unsugared `lambda' form:
     (define count-args2
       (lambda args
         (format #t "You passed ~a args: ~a" (length args) args)))

     ;; You can mix regular and packed arguments
     (define (hello-count name . args)
       (format #t "Hello ~a, you passed ~a extra args" name (length args)))
     (hello-count "Finn" 1 2 3)
                                             ; => "Hello Finn, you passed 3 extra args"
     ;; ... unsugared:
     (define hello-count2
       (lambda (name . args)
         (format #t "Hello ~a, you passed ~a extra args" name (length args))))

     ;; And with keywords
     ;; the keywords are those like this #:its-name, sometimes you may see
     ;; :its-name without '#' in certain Scheme implementation.
     ;; NOTE: keywords is not in any Scheme standards like RnRs.
     ;;       But mainstream Scheme implementation often contains it. 
     ;;	 This truth also means that different implementation may has
     ;;	 different result.
     ;;       The code below will follow Guile situation.
     (define* (hello #:key (name "World") (greeting "Hello") . args)
       (format #t "~a ~a, ~a extra args~%" greeting name (length args)))
     ;; 'define*' is similar with 'define', but you may use it for defining
     ;; optional args or using keyword to specify the value to specified argument.
     (hello)                 ; => "Hello World, 0 extra args"
     (hello 1 2 3)           ; => "Hello World, 3 extra args"
     (hello #:greeting "Hi") ; => "Hi World, 2 extra args"
     ;; NOTE: In Guile, all the keyword-value pairs are countered as the rest args.
     ;;       It means 'args' here will be (#:greeting "Hi"), so its length is 2.
     ;;       If you are in Racket, it's different, so the result will be 0.
     ;;       Because it's not defined in RnRs, so it's implementation specific.
     (hello #:name "Finn" #:greeting "Hey") ; => "Hey Finn, 4 extra args"
     (hello 1 2 3 #:greeting "Hi" #:name "Finn" 4 5 6) ; => "Hi Finn, 10 extra args"

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; 4. Equality
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

     ;; for numbers use `='
     (= 3 3.0) ; => #t
     (= 2 1) ; => #f

     ;; for characters use `char=?'
     (char=? #\c #\c) ; => #t

     ;; for object identity use `eq?'
     ;; WARNING: don't use `eq?' on numbers and characters, the reason is very simple:
     ;;          because RnRs treat this rule as undefined! 
     ;;(eq? 3 3) ; => Wrong! it's undefined! So it depends on implementation!
     ;; No matter if you got #t from above, it's a wrong usage!!!
     ;; Should use (= 3 3) or (eqv? 3 3)

     (eq? (list 3) (list 3)) ; => #f
     ;; Why it's #f? Because comparison between objects depends on their head-pointers.
     ;; These two lists are different objects, and they have different head-pointers.

     (eq? 'a 'a) ; => #t
     ;; Symbols are the typical objects to compare with their head-pointers

     ;; eqv?
     ;; The difference between `eqv?' and `eq':
     ;; You can compare numbers and characters with `eqv?'
     ;; When you use `eqv?' for any objects other than numbers&characters, it's the
     ;; same with `eq?'.
     (eqv? 3 3)     ; => #t
     (eqv? #\c #\c) ; => #t
     (eqv? 'a 'a)   ; => #t

     ;; for collections use `equal?'
     ;; `equal?' will compare all the values in a collections type like record or list.
     ;; You can compare any objects with `equal?' safely, but inefficiency.
     (equal? (list 'a 'b) (list 'a 'b)) ; => #t
     (equal? (list 'a 'b) (list 'b 'a)) ; => #f

     ;; Choosing proper equal pred for you code, is one of the art in Scheme programming!

     (eqv? "abcd" "abcd") ; => unspecified
     ;; Obviously, strings are collections type, so...it's your EXECISE now!

     ;; Another EXECISE, what's the proper 'equal-pred' for functions?
     (what-to-use? (lambda (x) (1+ x)) (lambda (x) (1+ x)))

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; 5. Control Flow
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

     ;;; Conditionals

     (if #t               ; test expression
         "this is true"   ; then expression
         "this is false") ; else expression
                                             ; => "this is true"

     ;; In conditionals, all non-#f values are treated as true
     (member 'Groucho '(Harpo Groucho Zeppo)) ; => '(Groucho Zeppo)
     (if (member 'Groucho '(Harpo Groucho Zeppo))
         'yep
         'nope)
                                             ; => 'yep

     ;; `cond' chains a series of tests to select a result
     (cond ((> 2 2) (error "wrong!"))
           ((< 2 2) (error "wrong again!"))
           (else 'ok)) ; => 'ok

     ;;; Pattern Matching
     ;; For Racket users:
     (require racket/match) ; use match module
     (define (fizzbuzz? n)
       (match (list (remainder n 3) (remainder n 5))
         ((list 0 0) 'fizzbuzz)
         ((list 0 _) 'fizz)
         ((list _ 0) 'buzz)
         (else #f)))

     ;; For Guile users:
     (use-modules (ice-9 match)) ; use match module
     (define (fizzbuzz? n)
       (match (list (remainder n 3) (remainder n 5))
         ((0 0) 'fizzbuzz)
         ((0 _) 'fizz)
         ((_ 0) 'buzz)
         (else #f)))

     (fizzbuzz? 15) ; => 'fizzbuzz
     (fizzbuzz? 37) ; => #f

     ;;; Loops

     ;; Looping can be done through (tail-) recursion
     (define (lp i)
       (when (< i 10)
         (format #t "i=~a\n" i)
         (lp (1+ i))))
     (lp 5) ; => i=5, i=6, ...

     ;; Similarly, with a named let
     (let lp ((i 0))
       (when (< i 10)
         (format #t "i=~a\n" i)
         (lp (1+ i)))) ; => i=0, i=1, ...

     ;; how to get a range? just like range(0, 9)?
     ;; the original 'iota' only accept one para
     (iota 10) ; ==> (0 1 2 3 4 5 6 7 8 9)
     ;; the 'iota' in srfi-1 was extended 
     (use-modules (srfi srfi-1))
     ;; #<procedure iota (count #:optional start step)>
     (iota 5 10) ; => (10 11 12 13 14) 
     ;; means from 10 count 5 times, each step +1 (plus one is default)
     (iota 5 10 2) ; => (10 12 14 16 18)
     ;; from 10 count 5 times, each step +2
     ;; If you need a Python like range(5, 10) ==> (5 6 7 8 9), try:
     (define (range from to) (map (lambda (x) (+ from x)) (iota (- to from))))
     ;; EXECISE: you may find this 'range' implementation is not so good,
     ;;          please optimize it if you can.
     (range 5 10) ; => (5 6 7 8 9)

     ;; how to do iteration?
     (for-each display '(1 2 3 4 5))
     ;; => 12345
     (for-each (lambda (i) (format #t "i=~a\n" i))
               (iota 10)) ; => i=0, i=1, ...
     (for-each (lambda (i) (format #t "i=~a\n" i))
               (range 5 10)) ; => i=5, i=6, ...

     ;;; Iteration Over Other Sequences
     ;; `for' allows iteration over many other kinds of sequences:
     ;; lists, vectors, strings, sets, hash tables, etc...
     (for-each display '(l i s t))
     ;; => list
     (define vector-for-each (@ (rnrs) vector-for-each))
     ;; export vector-for-each from rnrs only
     (vector-for-each display #(v e c t o r))
     ;; => vector
     (string-for-each display "string")
     ;; => string
     ;;; More Iterations
     (do ((i 10 (1+ i)) (j '(x y z) (cdr j))) 
         ((null? j)) ; if j is '(), just end the loop
       (format #t "~a:~a " i (car j)))
                                             ; => 0:x 1:y 2:z

     ;;; Exceptions

     ;; To catch exceptions, use the 'catch' form
     (catch 'my-error 
       (lambda () (throw 'my-error))
       (lambda e (display "oh~my error!\n")))
                                             ; => oh~my error!

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; 6. Mutation
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

     ;; Use `set!' to assign a new value to an existing variable
     (define n 5)
     (set! n (1+ n))
     n ; => 6

     ;; Use fluid for explicitly mutable values
     (define n* (make-fluid 5))
     (fluid-set! n* (1+ (fluid-ref n*)))
     (fluid-ref n*) ; => 6

     ;; Many Guile datatypes are immutable (pairs, lists, etc), some come in
     ;; both mutable and immutable flavors (strings, vectors, hash tables,
     ;; etc...)

     ;; Use `vector' or `make-vector' to create mutable vectors
     (define vec (vector 2 2 3 4))
     (define wall (make-vector 100 'bottle-of-beer))
     ;; Use vector-set! to update a slot
     (vector-set! vec 0 1)
     (vector-set! wall 99 'down)
     vec ; => #(1 2 3 4)

     ;; Create an empty mutable hash table and manipulate it
     (define m3 (make-hash-table))
     (hash-set! m3 'a 1)
     (hash-set! m3 'b 2)
     (hash-set! m3 'c 3)
     (hash-ref m3 'a)   ; => 1
     (hash-ref m3 'd 0) ; => 0
     (hash-remove! m3 'a)

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; 7. Modules
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

     ;; Modules let you organize code into multiple files and reusable
     ;; libraries; Make sure put all the module code in one file, since 
     ;; the modules split as files. And the module name should be same 
     ;; with the filename, say, module named (my-cake) is 'my-cake.scm',
     ;; and module named (mods my-cake) is 'mods/my-cake.scm',
     ;; (mods submods my-cake) ==> 'mods/submods/my-cake.scm'.
     ;; ---begin my-cake.scm---
     (define-module (my-cake) ; define a `cake' module based on racket/base
       #:use-module (ice-9 format) ; the pre-requisition of current module
       #:export (print-cake)) ; function exported by the module

     (define (show fmt n ch) ; internal function
       (format #t fmt (make-string n ch))
       (newline))

     (define (print-cake n)
       (show "   ~a   " n #\.)
       (show " .-~a-. " n #\|)
       (show " | ~a | " n #\space)
       (show "---~a---" n #\-))
     ;; --end my-cake.scm---

     ;; Be sure that the path of 'my-cake.scm' is in your current 
     ;; %load-path list. Use `use-modules' to get all `provide'd names 
     ;; from a module.
     (use-modules (my-cake)) ; the ' is for a local submodule
     (print-cake 3)
                                             ; (show "~a" 1 #\A) ; => error, `show' was not exported

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; 8. Classes and Objects
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; TODO
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; 9. Macros
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

     ;; Macros let you extend the syntax of the language

     ;; Let's add a while loop
     (define-syntax-rule (while condition body ...)
       (let loop ()
         (when condition
           body ...
           (loop))))

     (let ((i 0))
       (while (< i  10)
         (display i)
         (set! i (1+ i))))

     ;; Macros are hygienic, you cannot clobber existing variables!
     (define-syntax-rule (swap! x y) ; -! is idomatic for mutation
       (let ((tmp x))
         (set! x y)
         (set! y tmp)))

     (define tmp 1)
     (define a 2)
     (define b 3)
     (swap! a b)
     (format #t "tmp = ~a; a = ~a; b = ~a\n" tmp a b) ; tmp is unaffected

     ;; But they are still code transformations, for example:
     (define-syntax-rule (bad-while condition body ...)
       (when condition
         body ...
         (bad-while condition body ...)))
     ;; this macro is broken: it generates infinite code, if you try to use
     ;; it, the compiler will get in an infinite loop

   #+END_SRC

* 용어

** 테스트케이스 
** 테스트스크립트
